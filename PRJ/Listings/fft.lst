C51 COMPILER V9.53.0.0   FFT                                                               02/16/2021 14:57:45 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FFT
OBJECT MODULE PLACED IN .\fft.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE ..\APP\FRAME\fft.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\APP\FRAME;..\COM;.
                    -.\DRV;..\HAL;..\APP) DEBUG OBJECTEXTEND PRINT(.\Listings\fft.lst) TABS(2) OBJECT(.\fft.obj)

line level    source

   1          #include "fft.h"
   2          #include "mic.h"
   3          
   4          static code uint8_t _br_table[SAMPLE_NUM] = {
   5              0, 16, 8, 24, 4, 20, 12, 28, 2, 18, 10, 26, 6, 22, 14, 30, 
   6              1, 17, 9, 25, 5, 21, 13, 29, 3, 19, 11, 27, 7, 23, 15, 31 
   7          };
   8          
   9          static code int8_t _sin_table[SAMPLE_NUM] = {
  10              0, 6, 12, 17, 22, 26, 29, 31, 32, 31, 29, 26, 22, 17, 12, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             - 0, 0
  11          };
  12          
  13          static code int8_t _cos_table[SAMPLE_NUM] = {
  14              32, 31, 29, 26, 22, 17, 12, 6, 0, -6, -12, -17, -22, -26, -29, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
             -, 0, 0, 0, 0
  15          };
  16          
  17          static data uint8_t _fft_sensitivity = 0;                        //Ë∞ÉÊï¥È¢ëË∞±ÂèòÂåñÂπÖÂ∫¶Ôºå‰∏çË¶ÅË∂ÖËøá
             -4
  18          
  19          static xdata int16_t _fft_real[SAMPLE_NUM] = {0};
  20          static xdata int16_t _fft_image[SAMPLE_NUM] = {0};
  21          
  22          static data uint8_t _fft_fre_div = 0;
  23          static data uint8_t _fft_a_max = 0;
  24          static data float _fft_q = 0;
  25          
  26          data uint8_t fft_a[FFT_A_SIZE] = {0};
  27          
  28          void fft(void)
  29          {
  30   1        register uint8_t i = 0, j = 0, neighbour = 0;
  31   1          register uint16_t z = 0;
  32   1          register int16_t tr = 0, ti = 0, temp = 0;
  33   1      
  34   1          for (i = 0; i < SAMPLE_NUM; i ++)                 //Ê≠§Â§ÑÂèØ‰ª•Âä†ÂÖ•Ëá™Âä®Â¢ûÁõä
  35   1          {
  36   2              mic_value(_fft_real[_br_table[i]]);
  37   2              _fft_real[_br_table[i]] <<= _fft_sensitivity;   //Ë∞ÉÊï¥È¢ëË∞±ÂèòÂåñÂπÖÂ∫¶Ôºå‰∏çË¶ÅË∂ÖËøá4
  38   2              _fft_image[i] = 0;
  39   2          }
  40   1      
  41   1      #if 0
                  printf("sssss--------\r\n");
                  for (i = 0; i < SAMPLE_NUM; i ++)
                      printf("%d, ", _fft_real[_br_table[i]]);
                  printf("\r\n");
              #endif
  47   1      
  48   1          temp = _fft_real[2] / 32;                 //ÊèêÂèñÁ≠âÁ∫ßÊï∞
  49   1          if ((7 < temp) && (temp <= 8))
  50   1          {
  51   2              _fft_sensitivity = 1;
C51 COMPILER V9.53.0.0   FFT                                                               02/16/2021 14:57:45 PAGE 2   

  52   2          }
  53   1          else if ((4 < temp) && (temp <= 6))
  54   1          {
  55   2              _fft_sensitivity = 2;
  56   2          }
  57   1          else if ((2 < temp) && (temp <= 4))
  58   1          {
  59   2              _fft_sensitivity = 3;
  60   2          }
  61   1          else
  62   1          {
  63   2              _fft_sensitivity = 4;
  64   2          }
  65   1      
  66   1          for (i = 0; i < NUM_TO_LOG; i ++)
  67   1          {
  68   2              z = 0;
  69   2              for (j = 0; j < SAMPLE_NUM; j ++)
  70   2              {
  71   3                  neighbour = 1 << i;
  72   3                  if ((j / neighbour) % 2 == 1)
  73   3                  {
  74   4                      tr = _fft_real[j];
  75   4                      ti = _fft_image[j];
  76   4                      _fft_image[j] = ti * _cos_table[z] - tr * _sin_table[z];
  77   4                      _fft_real[j] = tr * _cos_table[z] + ti * _sin_table[z];
  78   4      
  79   4                      z += 1 << (NUM_TO_LOG - i - 1);
  80   4                      neighbour = j - neighbour;
  81   4                      tr = _fft_real[neighbour];
  82   4                      ti = _fft_image[neighbour];
  83   4      
  84   4                      //Ëù∂ÂΩ¢ËøêÁÆó
  85   4                      _fft_image[neighbour] = ti + _fft_image[j];
  86   4                      _fft_real[neighbour] = tr + _fft_real[j];
  87   4      
  88   4                      _fft_image[j] = ti - _fft_image[j];
  89   4                      _fft_real[j] = tr - _fft_real[j];
  90   4                  }
  91   3                  else
  92   3                  {
  93   4                      z = 0;
  94   4                  }
  95   3              }
  96   2          }
  97   1      
  98   1          _fft_real[0]= _fft_image[0] = 0;             //ÂéªÊéâÁõ¥ÊµÅÂàÜÈáè
  99   1      
 100   1          //ÈáçÊñ∞ÂºÄÂßã‰∏ÄËΩÆÂàÜÈ¢ë
 101   1          _fft_a_max = 0;
 102   1          _fft_fre_div = 0;
 103   1          _fft_q = 0;
 104   1      
 105   1          for (i = 1; i <= FFT_A_SIZE; i ++)
 106   1          {
 107   2              j = i - 1;
 108   2              fft_a[j] = ((_fft_real[i] * _fft_real[i]) + (_fft_image[i] * _fft_image[i])) >> 8; //Ê±ÇÂêÑÈ¢ëÊÆµÂ
             -πÖÂÄºÔºåÂêëÈáèÂæóËÜú
 109   2              if (fft_a[j] < FFT_OUT_MIN)                 //ÊúÄÂ∞èËæìÂá∫
 110   2              {
 111   3                  fft_a[j] = 0;
 112   3              }
C51 COMPILER V9.53.0.0   FFT                                                               02/16/2021 14:57:45 PAGE 3   

 113   2              else
 114   2              {
 115   3                  fft_a[j] -= FFT_OUT_MIN;
 116   3              }
 117   2      
 118   2              if (fft_a[j] > _fft_a_max)
 119   2              {
 120   3                  _fft_a_max = fft_a[j];
 121   3              }
 122   2          }
 123   1      
 124   1      #if 0
                  printf("ffta--------\r\n");
                  for (i = 0; i < FFT_A_SIZE; i ++)
                  {
                      z = fft_a[i];
                      printf("%d, ", z);
                  }
                  printf("\r\n");
                  printf("zzz--------\r\n");
                  for (i = 1; i < SAMPLE_NUM; i ++)
                  {
                      z = ((_fft_real[i] * _fft_real[i]) + (_fft_image[i] * _fft_image[i])) >> 8;
                      printf("%d, ", z);
                  }
                  printf("\r\n");
              #endif
 140   1      }
 141          
 142          void fft_div(uint8_t div)
 143          {
 144   1          if (div == 0)
 145   1          {
 146   2              return;
 147   2          }
 148   1      
 149   1          if (_fft_fre_div != div)
 150   1          {
 151   2              _fft_fre_div = div;
 152   2              _fft_q = (float) _fft_a_max / (float) _fft_fre_div;
 153   2          }
 154   1      }
 155          
 156          uint8_t fft_pillars_get(uint8_t offset)
 157          {
 158   1          if (_fft_q < 0.001)
 159   1          {
 160   2              return 0;
 161   2          }
 162   1      
 163   1          return (float) fft_a[offset] / _fft_q;
 164   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    835    ----
   CONSTANT SIZE    =     96    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.53.0.0   FFT                                                               02/16/2021 14:57:45 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
