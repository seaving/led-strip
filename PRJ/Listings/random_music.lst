C51 COMPILER V9.53.0.0   RANDOM_MUSIC                                                      02/16/2021 14:57:47 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE RANDOM_MUSIC
OBJECT MODULE PLACED IN .\random_music.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE ..\APP\random_music.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\APP\FRAME;..\CO
                    -M;..\DRV;..\HAL;..\APP) DEBUG OBJECTEXTEND PRINT(.\Listings\random_music.lst) TABS(2) OBJECT(.\random_music.obj)

line level    source

   1          #include "random_music.h"
   2          #include "cache.h"
   3          #include "typedef.h"
   4          #include "player.h"
   5          
   6          static void __random_music_set(flush_param_t *param, uint8_t action_index, uint8_t start, uint8_t end, pos
             -ition_type_t position_type, uint8_t fre_index)
   7          {
   8   1          param->color_index = param->color_index % COLOR_HSV_ARRAY1_ROWS;
   9   1      
  10   1          if (param->fade_interval == 0)
  11   1          {
  12   2              param->fade_type = E_FADE_TYPE_BREATH;
  13   2              param->fade_interval = 1;
  14   2          }
  15   1      
  16   1          if (param->is_static_color)
  17   1          {
  18   2              param->mode = E_RANDOM_MUSIC_MODE_SINGLE;
  19   2          }
  20   1      
  21   1          if (param->mode == E_RANDOM_MUSIC_MODE_SINGLE)
  22   1          {
  23   2              flush_fade_music_init(param, action_index, true);
  24   2          }
  25   1          else if (param->mode == E_RANDOM_MUSIC_MODE_RANDOM)
  26   1          {
  27   2              flush_fade_music_init(param, action_index, false);
  28   2          }
  29   1      
  30   1          param->fade_interval *= 2;
  31   1          ctrl_set(param, 1, 1, 1, 10, action_index, start, end, position_type, 0, 0, 0);
  32   1          actions[action_index].fre_index = fre_index;
  33   1      }
  34          
  35          void random_music_set(flush_param_t *param)
  36          {
  37   1          data uint8_t action_index = 0;
  38   1      
  39   1          cache_clear(0);
  40   1          cache_clear(1);
  41   1      
  42   1          switch (param->position)
  43   1          {
  44   2              case E_RANDOM_MUSIC_POSITION_RANDOM:
  45   2                  __random_music_set(param, action_index, 0, 16, E_POSITION_TYPE_MUSIC_RANDOM, 1); action_index 
             -++;
  46   2                  __random_music_set(param, action_index, 17, 32, E_POSITION_TYPE_MUSIC_RANDOM, 8); action_index
             - ++;
  47   2                  __random_music_set(param, action_index, 33, 49, E_POSITION_TYPE_MUSIC_RANDOM, 14);
  48   2                  break;
  49   2              case E_RANDOM_MUSIC_POSITION_RANDOM1:
  50   2                  __random_music_set(param, action_index, 0, 6, E_POSITION_TYPE_MUSIC_RANDOM, 1); action_index +
             -+;
C51 COMPILER V9.53.0.0   RANDOM_MUSIC                                                      02/16/2021 14:57:47 PAGE 2   

  51   2                  __random_music_set(param, action_index, 7, 13, E_POSITION_TYPE_MUSIC_RANDOM, 3); action_index 
             -++;
  52   2                  __random_music_set(param, action_index, 14, 20, E_POSITION_TYPE_MUSIC_RANDOM, 5); action_index
             - ++;
  53   2                  __random_music_set(param, action_index, 21, 27, E_POSITION_TYPE_MUSIC_RANDOM, 7); action_index
             - ++;
  54   2                  __random_music_set(param, action_index, 28, 34, E_POSITION_TYPE_MUSIC_RANDOM, 9); action_index
             - ++;
  55   2                  __random_music_set(param, action_index, 35, 42, E_POSITION_TYPE_MUSIC_RANDOM, 11); action_inde
             -x ++;
  56   2                  __random_music_set(param, action_index, 43, 49, E_POSITION_TYPE_MUSIC_RANDOM, 13);
  57   2                  break;
  58   2              default:
  59   2                  break;
  60   2          }
  61   1      
  62   1          //把配置的action设置到播放器
  63   1          player_set(0, 0, action_index, 0, true);
  64   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    448    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
